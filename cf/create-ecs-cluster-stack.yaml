# aws cloudformation validate-template --template-body file://create-ecs-cluster-stack.yaml
# aws cloudformation create-stack --stack-name MyEcsCluster --template-body file://create-ecs-cluster-stack.yaml --capabilities CAPABILITY_NAMED_IAM  --region ap-southeast-1

AWSTemplateFormatVersion: "2010-09-09"
Resources:
  MyVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: MyVpc

  MyInternetGateway:
    Type: AWS::EC2::InternetGateway

  MyVpcGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVpc
      InternetGatewayId: !Ref MyInternetGateway

  MyRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVpc

  MyInternetRoute:
    Type: AWS::EC2::Route
    DependsOn: MyVpcGatewayAttachment
    Properties:
      RouteTableId: !Ref MyRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyInternetGateway

  MySubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVpc
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: ap-southeast-1a
      MapPublicIpOnLaunch: true

  MySubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MySubnet1
      RouteTableId: !Ref MyRouteTable

  MySubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVpc
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: ap-southeast-1b
      MapPublicIpOnLaunch: true

  MySubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MySubnet2
      RouteTableId: !Ref MyRouteTable

  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow HTTP traffic"
      VpcId: !Ref MyVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  MyEcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: MyEcsCluster

  MyEcsTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ECSExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:BatchCheckLayerAvailability
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  MyLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
        - !Ref MySubnet1
        - !Ref MySubnet2
      SecurityGroups:
        - !Ref MySecurityGroup

  MyLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref MyTargetGroup
      LoadBalancerArn: !Ref MyLoadBalancer
      Port: 80
      Protocol: HTTP

  MyTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId: !Ref MyVpc
      TargetType: ip

  MyLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: MyLogGroup
      RetentionInDays: 14

  MyTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: MyTaskDefinition
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt MyEcsTaskExecutionRole.Arn
      NetworkMode: awsvpc
      Cpu: 256
      Memory: 0.5GB
      ContainerDefinitions:
        - Name: my-app
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref MyLogGroup
              awslogs-region: ap-southeast-1
              awslogs-stream-prefix: ecs
          Image: 664947791947.dkr.ecr.ap-southeast-1.amazonaws.com/my-app-repo:latest
          Essential: true
          PortMappings:
            - ContainerPort: 80
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: MyLogGroup
              awslogs-region: ap-southeast-1
              awslogs-stream-prefix: ecs

  # MyService:
  #   Type: AWS::ECS::Service
  #   DependsOn: MyLoadBalancerListener
  #   Properties:
  #     ServiceName: MyService
  #     Cluster: !Ref MyEcsCluster
  #     TaskDefinition: !Ref MyTaskDefinition
  #     DesiredCount: 1
  #     LaunchType: FARGATE
  #     NetworkConfiguration:
  #       AwsvpcConfiguration:
  #         AssignPublicIp: ENABLED
  #         Subnets:
  #           - !Ref MySubnet1
  #           - !Ref MySubnet2
  #         SecurityGroups:
  #           - !Ref MySecurityGroup
  #     LoadBalancers:
  #       - TargetGroupArn: !Ref MyTargetGroup
  #         ContainerName: my-app
  #         ContainerPort: 80

Outputs:
  EcsClusterName:
    Description: "ECS Cluster Name"
    Value: !Ref MyEcsCluster
  SubnetId1:
    Description: "Subnet ID 1"
    Value: !Ref MySubnet1
  SubnetId2:
    Description: "Subnet ID 2"
    Value: !Ref MySubnet2
  SecurityGroupId:
    Description: "Security Group ID"
    Value: !Ref MySecurityGroup
  TaskExecutionRoleArn:
    Description: "Task Execution Role ARN"
    Value: !GetAtt
      - MyEcsTaskExecutionRole
      - Arn
  LoadBalancerUrl:
    Description: "URL of the load balancer"
    Value: !Sub "http://${MyLoadBalancer.DNSName}"
  # ServiceName:
  #   Description: "Service Name"
  #   Value: !Ref MyService
  LogGroupName:
    Description: "Log Group Name"
    Value: !Ref MyLogGroup
